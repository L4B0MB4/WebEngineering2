{"version":3,"sources":["C:/Users/Lars/Documents/Software Projects/WebEngineering2/pages\\index.jsx"],"names":["rsaKeys","b","Index","props","blockchain","actions","text","encrypted","encrypt","decrypted","decrypt","socket","endpoint","emit","message","on","data","chain","push","type","transaction","console","log","runAction","secret","code","action","shift","undefined","mine","sendTransaction","new_transaction","exportKey","newTransaction"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;;;;;;;;;AAGA,IAAMA,UAAU,sBAAY,EAACC,GAAG,GAAJ,EAAZ,CAAhB;;IAEMC,K;;;AAEF,mBAAYC,KAAZ,EACA;AAAA;;AAAA,kHACUA,KADV;;AAEI,cAAKC,UAAL,GAAkB,4BAAlB;AACA,cAAKC,OAAL,GAAe,EAAf;AACA,YAAIC,OAAO,YAAX;AACA,YAAIC,YAAYP,QAAQQ,OAAR,CAAgBF,IAAhB,EAAsB,QAAtB,CAAhB;AACA,YAAIG,YAAYT,QAAQU,OAAR,CAAgBH,SAAhB,EAA2B,MAA3B,CAAhB;AANJ;AAOC;;;;4CAGD;AAAA;;AACI,iBAAKI,MAAL,GAAc,sBAAG,EAACC,UAAS,uBAAV,EAAH,CAAd;AACA,iBAAKD,MAAL,CAAYE,IAAZ,CAAiB,MAAjB,EAAwB,EAACC,SAAQ,MAAT,EAAxB;AACA,iBAAKH,MAAL,CAAYI,EAAZ,CAAe,YAAf,EAA4B,UAACC,IAAD,EAC5B;AACI,uBAAKZ,UAAL,CAAgBa,KAAhB,GAAwBD,IAAxB;AACH,aAHD;;AAKA,iBAAKL,MAAL,CAAYI,EAAZ,CAAe,MAAf,EAAsB,uBACtB;AACE,uBAAKV,OAAL,CAAaa,IAAb,CAAkB,EAACC,MAAK,MAAN,EAAaC,wBAAb,EAAlB;AACA,uBAAKT,MAAL,CAAYE,IAAZ,CAAiB,gBAAjB;AACD,aAJD;AAKA,iBAAKF,MAAL,CAAYI,EAAZ,CAAe,gBAAf,EAAiC,iBACjC;AACI,uBAAKX,UAAL,CAAgBa,KAAhB,GAAwBA,KAAxB;AACAI,wBAAQC,GAAR,CAAYL,KAAZ;AACA,uBAAKM,SAAL;AACH,aALD;;AAOA,iBAAKZ,MAAL,CAAYI,EAAZ,CAAe,wBAAf,EAAwC,gBACxC;AACI,uBAAKS,MAAL,GAAcxB,QAAQU,OAAR,CAAgBe,IAAhB,EAAqB,MAArB,CAAd;AACA,uBAAKF,SAAL;AACH,aAJD;AAKH;;;oCAGD;AACI,gBAAIG,SAAS,KAAKrB,OAAL,CAAasB,KAAb,EAAb;AACA,gBAAGD,WAAUE,SAAb,EAAuB;AACvB,oBAAOF,OAAOP,IAAd;AAEI,qBAAK,MAAL;AAAa,yBAAKR,MAAL,CAAYE,IAAZ,CAAiB,WAAjB,EAA6B,KAAKT,UAAL,CAAgByB,IAAhB,CAAqBH,OAAON,WAA5B,CAA7B,EAAuE;AACpF,qBAAK,aAAL;AAAoB,yBAAKU,eAAL,CAAqBJ,OAAON,WAA5B,EAAyC;AAHjE;AAKH;;;wCAEeA,W,EAChB;AACIA,wBAAYI,MAAZ,GAAqB,KAAKA,MAA1B;AACA,iBAAKb,MAAL,CAAYE,IAAZ,CAAiB,iBAAjB,EAAmCO,WAAnC;AACH;;;yCAGD;AACI,gBAAIA,cAAc,KAAKhB,UAAL,CAAgB2B,eAAhB,CAAgC,UAAhC,EAA2C,UAA3C,EAAsD,GAAtD,CAAlB;AACA,iBAAK1B,OAAL,CAAaa,IAAb,CAAkB,EAACC,MAAK,aAAN,EAAoBC,wBAApB,EAAlB;AACA,iBAAKT,MAAL,CAAYE,IAAZ,CAAiB,sBAAjB,EAAwCb,QAAQgC,SAAR,CAAkB,QAAlB,CAAxC;AACH;;;iCAGD;AAAA;;AACI,mBAAQ;AAAA;AAAA;AAAA;AAAM;AAAA;AAAA,sBAAQ,SAAS;AAAA,mCAAI,OAAKC,cAAL,EAAJ;AAAA,yBAAjB;AAAA;AAAA,iBAAN;AAAA;AAAiE,yDAAjE;AAAA;AAAA,aAAR;AACH;;;;;;;;;;;eAEW/B,K;;;;;;;;;;;;;4BAvEVF,O;4BAEAE,K","file":"4.e67a82879d086eef92dd.hot-update.js","sourcesContent":["import React, { Component } from 'react';\r\nimport io from \"socket.io-client\"\r\nimport {Blockchain} from \"../components/blockchain\";\r\nimport NodeRSA from \"node-rsa\"\r\n\r\n\r\nconst rsaKeys = new NodeRSA({b: 512});\r\n\r\nclass Index extends Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.blockchain = new Blockchain();\r\n        this.actions = [];\r\n        var text = 'Hello RSA!';\r\n        var encrypted = rsaKeys.encrypt(text, 'base64');\r\n        var decrypted = rsaKeys.decrypt(encrypted, 'utf8');\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        this.socket = io({endpoint:\"http://localhost:3000\"});\r\n        this.socket.emit(\"init\",{message:\"init\"})\r\n        this.socket.on(\"blockchain\",(data)=>\r\n        {\r\n            this.blockchain.chain = data;\r\n        })\r\n\r\n        this.socket.on(\"mine\",transaction=>\r\n        {\r\n          this.actions.push({type:\"mine\",transaction})\r\n          this.socket.emit(\"get blockchain\");\r\n        })\r\n        this.socket.on(\"get blockchain\", chain=>\r\n        {\r\n            this.blockchain.chain = chain;\r\n            console.log(chain);\r\n            this.runAction();\r\n        });\r\n\r\n        this.socket.on(\"solve transaction code\",code=>\r\n        {\r\n            this.secret = rsaKeys.decrypt(code,\"utf8\");\r\n            this.runAction();\r\n        });\r\n    }\r\n\r\n    runAction()\r\n    {\r\n        let action = this.actions.shift();\r\n        if(action ===undefined)return;\r\n        switch(action.type)\r\n        {\r\n            case \"mine\": this.socket.emit(\"new block\",this.blockchain.mine(action.transaction));break;\r\n            case \"transaction\": this.sendTransaction(action.transaction);break;\r\n        }\r\n    }\r\n\r\n    sendTransaction(transaction)\r\n    {\r\n        transaction.secret = this.secret;\r\n        this.socket.emit(\"new transaction\",transaction)\r\n    }\r\n\r\n    newTransaction()\r\n    {\r\n        let transaction = this.blockchain.new_transaction(\"myadress\",\"myadress\",123);\r\n        this.actions.push({type:\"transaction\",transaction})\r\n        this.socket.emit(\"get transaction code\",rsaKeys.exportKey(\"public\"))\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (<div> <button onClick={()=>this.newTransaction()}>mine!</button> <br/>halloooo </div>)\r\n    }\r\n}\r\nexport default (Index);\n\n\n// WEBPACK FOOTER //\n// ./pages/index.jsx"],"sourceRoot":""}