{"version":3,"sources":["C:/Users/Lars/Documents/Software Projects/webengineering2/components\\blockchain.js"],"names":["Blockchain","current_transactions","chain","nodes","Set","new_block","public_id","Math","abs","random","transaction","last_block","length","proof","proof_of_work","reward","new_transaction","push","previous_hash","hash","JSON","stringify","block","address","add","index","timestamp","Date","now","toISOString","transactions","sender","recipient","amount","last_proof","last_hash","valid_proof","parseInt","createHash","update","digest","guess","guess_hash","startsWith","console","log","current_index","neighbours","new_chain","undefined","config","method","headers","max_length","i","node","res","fetch","node_chain","json","valid_chain"],"mappings":"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","file":"4.ca27e20db02bba19c610.hot-update.js","sourcesContent":["import crypto from \"crypto\";\r\n\r\nexport class Blockchain {\r\n    constructor() {\r\n      this.current_transactions = [];\r\n      this.chain = [];\r\n      this.nodes = new Set();\r\n      this.new_block(100, \"1\");\r\n      this.public_id = Math.abs(Math.random() * 10000);\r\n    }\r\n\r\n\r\n    mine(transaction)\r\n    {\r\n      let last_block = this.chain[this.chain.length - 1];\r\n      let proof = this.proof_of_work(last_block);\r\n      let reward = this.new_transaction(0, this.public_id, 1);\r\n      this.current_transactions.push(...[transaction,reward]);\r\n      let previous_hash = this.hash(JSON.stringify(last_block));\r\n      let block = this.new_block(proof, previous_hash);\r\n      return block;\r\n    }\r\n  \r\n    register_node(address) {\r\n      this.nodes.add(address);\r\n    }\r\n  \r\n    new_block(proof, previous_hash) {\r\n      let block = {\r\n        index: this.chain.length,\r\n        timestamp: new Date(Date.now()).toISOString(),\r\n        transactions: this.current_transactions,\r\n        proof,\r\n        previous_hash: previous_hash\r\n          ? previous_hash\r\n          : this.hash(this.chain[this.chain.length - 1])\r\n      };\r\n  \r\n      this.current_transactions = [];\r\n      this.chain.push(block);\r\n      return block;\r\n    }\r\n  \r\n    new_transaction(sender, recipient, amount) {\r\n      let transaction = {sender, recipient,amount}\r\n      return transaction;\r\n    }\r\n  \r\n    proof_of_work(last_block) {\r\n      let last_proof = last_block.proof;\r\n      let last_hash = this.hash(JSON.stringify(last_block));\r\n  \r\n      let proof = 0;\r\n      while (this.valid_proof(last_proof, proof, last_hash) !== true) proof+=parseInt(Math.random()*10+1);\r\n  \r\n      return proof;\r\n    }\r\n  \r\n    hash(block) {\r\n      return crypto\r\n        .createHash(\"sha256\")\r\n        .update(block)\r\n        .digest(\"hex\");\r\n    }\r\n  \r\n    valid_proof(last_proof, proof, last_hash) {\r\n      let guess = `${last_proof}${proof}${last_hash}`;\r\n      let guess_hash = this.hash(guess);\r\n      return guess_hash.startsWith(\"0000\");\r\n    }\r\n  \r\n    valid_chain(chain) {\r\n      console.log(\"chain length: \" + chain.length)\r\n      if(chain.length<=0) return false;\r\n        let last_block = chain[0];\r\n        let current_index = 1;\r\n  \r\n        while(current_index < chain.length)\r\n        {\r\n          let block = chain[current_index];\r\n          if(block.previous_hash !== this.hash(JSON.stringify(last_block)))\r\n          {\r\n            return false;\r\n          }\r\n  \r\n          if(!this.valid_proof(last_block.proof,block.proof,this.hash(JSON.stringify(last_block))))\r\n          {\r\n            return false;\r\n          }\r\n          \r\n          last_block = block;\r\n          current_index++;\r\n        }\r\n  \r\n        return true;\r\n  \r\n    }\r\n  \r\n    async resolve_conflicts() {\r\n      let neighbours = [...this.nodes];\r\n      let new_chain = undefined;\r\n      const config = {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"content-type\": \"application/json\"\r\n        }\r\n      };\r\n      let max_length = this.chain.length;\r\n      for (let i = 0; i < neighbours.length; i++) {\r\n        let node = neighbours[i];\r\n        const res = await fetch(`${node}/chain`, config);\r\n        const node_chain = await res.json();\r\n        if (node_chain.length > max_length && this.valid_chain(node_chain)) {\r\n          max_length = node_chain.length;\r\n          new_chain = node_chain;\r\n        }\r\n      }\r\n      if (new_chain !== undefined) {\r\n        this.chain = new_chain;\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n  \n\n\n// WEBPACK FOOTER //\n// ./components/blockchain.js"],"sourceRoot":""}